#!/usr/bin/env python3
"""
Script de migration pour ajouter la configuration de conversation
aux profils existants.

Ce script met √† jour automatiquement tous les profils JSON existants
avec la nouvelle configuration de conversation requise pour le ConversationManager.
"""

import os
import sys
import json
from pathlib import Path
from config_manager import ConfigManager
import logging

def setup_logging():
    """Configuration du logging pour la migration"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('migration_conversation.log'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    return logging.getLogger(__name__)

def migrate_profiles():
    """
    Migre tous les profils existants pour ajouter la configuration de conversation
    """
    logger = setup_logging()
    logger.info("=== D√âBUT MIGRATION CONVERSATION ===")
    
    try:
        # Initialiser le ConfigManager
        config_manager = ConfigManager()
        
        # Obtenir la liste des profils existants
        profiles_dir = Path("profiles")
        if not profiles_dir.exists():
            logger.warning("R√©pertoire profiles/ non trouv√©")
            return False
        
        # Lister tous les fichiers .json dans profiles/
        profile_files = list(profiles_dir.glob("*.json"))
        
        if not profile_files:
            logger.info("Aucun profil JSON trouv√©")
            return True
        
        logger.info(f"Profils trouv√©s : {len(profile_files)}")
        
        migrated_count = 0
        skipped_count = 0
        error_count = 0
        
        for profile_file in profile_files:
            profile_name = profile_file.stem
            logger.info(f"Migration du profil : {profile_name}")
            
            try:
                # Charger le profil existant
                with open(profile_file, 'r', encoding='utf-8') as f:
                    profile_data = json.load(f)
                
                # V√©rifier si la configuration conversation existe d√©j√†
                if 'conversation' in profile_data:
                    logger.info(f"  ‚Üí {profile_name} : d√©j√† migr√©, ignor√©")
                    skipped_count += 1
                    continue
                
                # Ajouter la configuration de conversation
                profile_data['conversation'] = {
                    "summary_enabled": True,
                    "summary_threshold": {
                        "words": 300,
                        "sentences": 6
                    },
                    "summary_template_id": "default_summary",
                    "show_indicators": True
                }
                
                # Sauvegarder avec le ConfigManager pour validation
                success = config_manager.save_profile(profile_name, profile_data)
                
                if success:
                    logger.info(f"  ‚Üí {profile_name} : migr√© avec succ√®s")
                    migrated_count += 1
                else:
                    logger.error(f"  ‚Üí {profile_name} : √©chec de sauvegarde")
                    error_count += 1
                    
            except Exception as e:
                logger.error(f"  ‚Üí {profile_name} : erreur - {e}")
                error_count += 1
        
        # R√©sum√© de la migration
        logger.info(f"=== R√âSUM√â MIGRATION ===")
        logger.info(f"Profils migr√©s    : {migrated_count}")
        logger.info(f"Profils ignor√©s   : {skipped_count}")
        logger.info(f"Erreurs           : {error_count}")
        logger.info(f"Total trait√©      : {len(profile_files)}")
        
        # V√©rifier que le template de conversation existe
        template_created = config_manager.save_conversation_template(
            "default_summary",
            """Veuillez analyser la conversation suivante et cr√©er un r√©sum√© concis qui pr√©serve les informations essentielles pour maintenir la continuit√© de la discussion.

INSTRUCTIONS DE R√âSUM√â :
- Conservez les points cl√©s et d√©cisions importantes
- Maintenez le contexte n√©cessaire pour les prochaines questions
- Soyez concis mais informatif (maximum 150 mots)
- Organisez par th√®mes si plusieurs sujets sont abord√©s

CONVERSATION √Ä R√âSUMER :
{HISTORIQUE_COMPLET}

R√âSUM√â CONTEXTUEL :"""
        )
        
        if template_created:
            logger.info("Template de conversation 'default_summary' cr√©√©/v√©rifi√©")
        
        logger.info("=== FIN MIGRATION ===")
        return error_count == 0
        
    except Exception as e:
        logger.error(f"Erreur g√©n√©rale de migration : {e}")
        return False

def backup_profiles():
    """
    Cr√©e une sauvegarde des profils avant migration
    """
    logger = logging.getLogger(__name__)
    
    try:
        profiles_dir = Path("profiles")
        backup_dir = Path("profiles_backup_conversation")
        
        if not profiles_dir.exists():
            return True
        
        # Cr√©er le r√©pertoire de sauvegarde
        backup_dir.mkdir(exist_ok=True)
        
        # Copier tous les fichiers JSON
        import shutil
        profile_files = list(profiles_dir.glob("*.json"))
        
        for profile_file in profile_files:
            backup_path = backup_dir / profile_file.name
            shutil.copy2(profile_file, backup_path)
            logger.info(f"Sauvegarde : {profile_file.name}")
        
        logger.info(f"Sauvegarde cr√©√©e dans : {backup_dir}")
        return True
        
    except Exception as e:
        logger.error(f"Erreur de sauvegarde : {e}")
        return False

def main():
    """Point d'entr√©e principal du script de migration"""
    print("üîÑ Migration des profils pour la gestion de conversation")
    print("=" * 60)
    
    # Cr√©er une sauvegarde
    print("üìÅ Cr√©ation de sauvegarde...")
    if not backup_profiles():
        print("‚ùå √âchec de la sauvegarde - arr√™t")
        return False
    
    print("‚úÖ Sauvegarde cr√©√©e")
    
    # Ex√©cuter la migration
    print("\nüöÄ D√©but de la migration...")
    success = migrate_profiles()
    
    if success:
        print("\n‚úÖ Migration termin√©e avec succ√®s!")
        print("üìã V√©rifiez le fichier migration_conversation.log pour les d√©tails")
        return True
    else:
        print("\n‚ùå Migration termin√©e avec des erreurs")
        print("üìã Consultez migration_conversation.log pour les d√©tails")
        print("üíæ Restaurez depuis profiles_backup_conversation/ si n√©cessaire")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
