#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test d√©bogage historique Gemini - Analyse pas √† pas
Reproduit le probl√®me avec des logs d√©taill√©s
"""

import sys
import os
import tkinter as tk

# Ajouter le dossier parent au PATH pour les imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_historique_gemini_debug():
    """
    Test simple pour d√©clencher le d√©bogage de l'historique
    Simule une conversation avec historique pour voir les logs
    """
    print("üöÄ TEST D√âBOGAGE HISTORIQUE GEMINI")
    print("=" * 50)
    
    # Import du syst√®me principal
    import gui
    from conversation_manager import ConversationManager
    from config_manager import ConfigManager
    
    # Cr√©er une fen√™tre test minimale
    root = tk.Tk()
    root.withdraw()  # Cacher la fen√™tre
    
    # Cr√©er les composants n√©cessaires
    champ_q = tk.Text(root)
    champ_r = tk.Text(root)
    champ_history = tk.Text(root)
    
    # Initialiser le ConversationManager avec profil Gemini
    config_manager = ConfigManager()
    
    # Charger le profil Gemini
    profil_gemini = config_manager.load_profile("Gemini")
    if not profil_gemini:
        print("‚ùå Erreur: Impossible de charger le profil Gemini")
        return False
    
    print(f"‚úÖ Profil Gemini charg√©: {profil_gemini.get('name', 'Unknown')}")
    print(f"   History activ√©: {profil_gemini.get('history', False)}")
    
    # Mettre √† jour le profil global
    gui.profilAPIActuel = profil_gemini
    
    # Cr√©er le ConversationManager
    conversation_manager = ConversationManager(
        config_manager=config_manager,
        profile_config=profil_gemini.get('conversation', {}),
        api_type="gemini"
    )
    
    # Simuler une conversation avec historique
    print("\nüìù SIMULATION CONVERSATION:")
    conversation_manager.add_message('user', 'Bonjour, mon nom est toto')
    conversation_manager.add_message('model', 'Bonjour toto ! Je suis ravi de faire votre connaissance.')
    
    # Ajouter la question test dans le champ
    question_test = "Comment je m'appelle ?"
    champ_q.insert('1.0', question_test)
    
    print(f"   Question 1: Bonjour, mon nom est toto")
    print(f"   R√©ponse 1: Bonjour toto ! Je suis ravi...")
    print(f"   Question 2: {question_test}")
    
    print("\nüîç LANCEMENT DU D√âBOGAGE...")
    print("=" * 50)
    
    # Appeler soumettreQuestionAPI avec les logs
    try:
        gui.soumettreQuestionAPI(champ_q, champ_r, champ_history, conversation_manager, None)
        
        # R√©cup√©rer la r√©ponse
        reponse = champ_r.get('1.0', tk.END).strip()
        print(f"\nüìã R√âPONSE FINALE:")
        print(f"   {reponse[:200]}{'...' if len(reponse) > 200 else ''}")
        
        # Analyser si l'historique a √©t√© pris en compte
        if "toto" in reponse.lower():
            print("‚úÖ HISTORIQUE PRIS EN COMPTE - Le nom 'toto' appara√Æt dans la r√©ponse")
            return True
        else:
            print("‚ùå HISTORIQUE IGNOR√â - Le nom 'toto' n'appara√Æt pas dans la r√©ponse")
            return False
            
    except Exception as e:
        print(f"‚ùå ERREUR PENDANT LE TEST: {e}")
        return False
    finally:
        root.destroy()

def main():
    """
    Lance le test de d√©bogage
    """
    success = test_historique_gemini_debug()
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ TEST R√âUSSI - Historique fonctionnel")
    else:
        print("‚ö†Ô∏è  TEST √âCHOU√â - Historique non fonctionnel")
    print("=" * 50)
    
    return 0 if success else 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
