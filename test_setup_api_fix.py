"""
Test de correction du menu Setup API 
V√©rification du chargement des profils par d√©faut et de la liste des profils
"""

import sys
import os

# Ajouter le r√©pertoire courant au path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from config_manager import ConfigManager

def test_setup_api_loading():
    """Test du chargement des profils dans Setup API"""
    print("üîß TEST SETUP API - CHARGEMENT PROFILS")
    print("=" * 50)
    
    config_manager = ConfigManager(".")
    
    # Test 1: V√©rifier le profil par d√©faut
    print("\n=== TEST 1: Profil par d√©faut ===")
    try:
        profil_defaut = config_manager.get_default_profile()
        if profil_defaut:
            print(f"‚úÖ Profil par d√©faut : {profil_defaut['name']}")
            print(f"  - API URL: {profil_defaut.get('api_url', 'N/A')}")
            print(f"  - Template ID: {profil_defaut.get('template_id', 'N/A')}")
            print(f"  - Replace API Key: {profil_defaut.get('replace_apikey', 'N/A')}")
        else:
            print("‚ùå Aucun profil par d√©faut trouv√©")
            return False
    except Exception as e:
        print(f"‚ùå Erreur chargement profil par d√©faut : {e}")
        return False
    
    # Test 2: Lister tous les profils disponibles
    print("\n=== TEST 2: Liste des profils ===")
    try:
        profils = config_manager.list_profiles()
        if profils:
            print(f"‚úÖ Profils disponibles : {profils}")
            if len(profils) >= 3:
                print("‚úÖ Au moins 3 profils (Gemini, OpenAI, Claude)")
            else:
                print("‚ö†Ô∏è  Moins de 3 profils trouv√©s")
        else:
            print("‚ùå Aucun profil trouv√©")
            return False
    except Exception as e:
        print(f"‚ùå Erreur listage profils : {e}")
        return False
    
    # Test 3: Chargement de chaque profil
    print("\n=== TEST 3: Chargement individuel des profils ===")
    try:
        for profil_name in profils:
            profil_data = config_manager.load_profile(profil_name)
            if profil_data:
                template_id = profil_data.get('template_id', '')
                template_exists = bool(config_manager.load_template(template_id)) if template_id else False
                print(f"‚úÖ {profil_name} : charg√© (template: {'‚úÖ' if template_exists else '‚ùå'})")
            else:
                print(f"‚ùå {profil_name} : erreur de chargement")
                return False
    except Exception as e:
        print(f"‚ùå Erreur chargement individuel : {e}")
        return False
    
    # Test 4: Simulation du chargement Setup API
    print("\n=== TEST 4: Simulation Setup API ===")
    try:
        # Simuler charger_profil_defaut()
        profil_defaut_nom = profil_defaut.get('name', 'Gemini') if profil_defaut else 'Gemini'
        print(f"‚úÖ Nom profil par d√©faut pour Setup API : {profil_defaut_nom}")
        
        # Simuler charger_donnees_profil()
        donnees_profil = config_manager.load_profile(profil_defaut_nom)
        if donnees_profil:
            print(f"‚úÖ Donn√©es profil charg√©es : {list(donnees_profil.keys())}")
            
            # V√©rifier les champs importants
            champs_importants = ['name', 'api_key', 'api_url', 'template_id', 'replace_apikey']
            for champ in champs_importants:
                valeur = donnees_profil.get(champ, '')
                statut = "‚úÖ" if valeur else "‚ö†Ô∏è"
                print(f"  {statut} {champ}: {'present' if valeur else 'vide'}")
        else:
            print("‚ùå Impossible de charger les donn√©es du profil")
            return False
    except Exception as e:
        print(f"‚ùå Erreur simulation Setup API : {e}")
        return False
    
    return True

def main():
    """Test principal"""
    print("üöÄ TEST CORRECTION SETUP API")
    print()
    
    success = test_setup_api_loading()
    
    print("\n" + "=" * 50)
    if success:
        print("‚úÖ SETUP API CORRIG√â !")
        print("üìù Le menu Setup API devrait maintenant :")
        print("  ‚úÖ Charger le profil par d√©faut correctement")
        print("  ‚úÖ Afficher les 3 profils dans la liste d√©roulante")
        print("  ‚úÖ Remplir les champs avec les bonnes donn√©es")
        print("  ‚úÖ G√©rer les templates curl correctement")
    else:
        print("‚ùå Il reste des probl√®mes √† corriger")
    
    return success

if __name__ == "__main__":
    main()
