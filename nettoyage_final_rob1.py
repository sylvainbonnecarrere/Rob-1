#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de nettoyage final du projet ROB-1
Supprime tous les fichiers de d√©veloppement et de d√©bogage
"""
import os
import sys

# Fichiers et dossiers √† conserver (core de l'application)
FICHIERS_A_CONSERVER = {
    # Fichiers principaux
    'main.py',
    'gui.py', 
    'config_manager.py',
    'conversation_manager.py',
    'api_response_parser.py',
    'requirements.txt',
    'README.md',
    'RUN.bat',
    'utils.py',
    'system_profile_generator.py',
    # Dossiers complets √† conserver
    'core/',
    'images/', 
    'install_scripts/',
    'profiles/',
    'system/',
    'templates/',
    'utils/',
    'conversations/',
    'development/',
    'profiles_backup_conversation/',
    '__pycache__/',
    '.git/',
    '.gitignore',
    '.env',
    '.env.example',
    # Script de nettoyage lui-m√™me
    'nettoyage_final_rob1.py'
}

def supprimer_fichier(chemin):
    """Supprime un fichier en toute s√©curit√©"""
    try:
        if os.path.exists(chemin):
            os.remove(chemin)
            print(f"‚úÖ Supprim√©: {chemin}")
            return True
        else:
            print(f"‚ö†Ô∏è D√©j√† absent: {chemin}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur suppression {chemin}: {e}")
        return False

def main():
    """Fonction principale de nettoyage"""
    print("üßπ NETTOYAGE FINAL PROJET ROB-1")
    print("=" * 60)
    
    chemin_racine = os.path.dirname(os.path.abspath(__file__))
    os.chdir(chemin_racine)
    
    # Lister tous les fichiers dans le r√©pertoire racine
    tous_fichiers = []
    for element in os.listdir('.'):
        if os.path.isfile(element):
            tous_fichiers.append(element)
    
    print(f"üìÅ Analyse de {len(tous_fichiers)} fichiers dans le r√©pertoire racine...")
    
    # Identifier les fichiers √† supprimer
    fichiers_a_supprimer = []
    for fichier in tous_fichiers:
        if fichier not in FICHIERS_A_CONSERVER:
            fichiers_a_supprimer.append(fichier)
    
    print(f"\nüéØ {len(fichiers_a_supprimer)} fichiers √† supprimer:")
    for fichier in sorted(fichiers_a_supprimer):
        print(f"   ‚Ä¢ {fichier}")
    
    print(f"\n‚úÖ {len(FICHIERS_A_CONSERVER) - 1} √©l√©ments √† conserver:")  # -1 pour exclure le script
    for element in sorted(FICHIERS_A_CONSERVER):
        if element != 'nettoyage_final_rob1.py':
            print(f"   ‚Ä¢ {element}")
    
    # Demander confirmation
    print(f"\n‚ö†Ô∏è √ätes-vous s√ªr de vouloir supprimer {len(fichiers_a_supprimer)} fichiers ?")
    confirmation = input("Tapez 'OUI' pour confirmer: ")
    
    if confirmation != 'OUI':
        print("‚ùå Annulation du nettoyage")
        return
    
    # Proc√©der √† la suppression
    print(f"\nüßπ Suppression en cours...")
    
    supprimes = 0
    erreurs = 0
    
    for fichier in fichiers_a_supprimer:
        if supprimer_fichier(fichier):
            supprimes += 1
        else:
            erreurs += 1
    
    # Nettoyage sp√©cifique: backup dans install_scripts
    backup_file = os.path.join('install_scripts', 'template_installer.py.backup')
    if os.path.exists(backup_file):
        if supprimer_fichier(backup_file):
            supprimes += 1
    
    # R√©sum√© final
    print(f"\nüìä R√âSUM√â DU NETTOYAGE:")
    print(f"   ‚úÖ {supprimes} fichiers supprim√©s")
    print(f"   ‚ùå {erreurs} erreurs")
    print(f"   üìÅ Structure core pr√©serv√©e")
    
    print(f"\nüéâ NETTOYAGE TERMIN√â!")
    print(f"Le projet ROB-1 est maintenant propre et pr√™t pour la production.")
    
    # Afficher la structure finale
    print(f"\nüìÅ STRUCTURE FINALE:")
    for element in sorted(os.listdir('.')):
        if os.path.isdir(element):
            print(f"   üìÅ {element}/")
        else:
            print(f"   üìÑ {element}")

if __name__ == "__main__":
    main()
